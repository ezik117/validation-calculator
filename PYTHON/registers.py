# *****************************************************************************
# МОДУЛЬ:    GMP-CALCULATOR
# ФАЙЛ:      REGISTERS.PY
# ЗАГОЛОВОК: КЛАССЫ РЕГИСТРОВ
# ОПИСАНИЕ:  Описывает класс регистров калькулятора
# *****************************************************************************

# TODO реконструкция регистра
# Причины:
# 1) нет смысла хранить несколько объектов отдельно (в классах Registry и BigFloat).
# Это растрата памяти, что плохо для ресурсозатратного проекта с расчетом больших чисел.
# Реализация:
# - [x] специальный метод str() для реализации вывода результата в виде строки
# - [x] закрыть атрибут value и сделать его видимым через декоратор свойства
# - [x] ??? установить setter для свойства value, если это регистр Z (спорно, т.к. другие регистры будут возвращать ошибку)
# - [ ] установить ограничительные множества цифр (decimal, octal и т.п.) для проверки соответствия ввода
# - [ ] разделить хранение целой и дробной частей, т.к. невозможно работать с типом float без потери точности
# - [ ] ??? добавить свойства получения длин каждой части (необходимо для дальнейших расчетов)
# - [ ] исправить метод input() для возможности ввода дробных величин
# - [ ] ??? ограничение ввода незначащих нулей для дробной части


class Regisry:
	""" КЛАСС ДЛЯ РЕГИСТРА КАЛЬКУЛЯТОРА """
	# конструктор
	# IN: name - буква регистра, необходима для избежания получения одинаковой ссылки на
	#            разные объекты
	# IN: base - ссылка на базовый класс калькулятора для 
	def __init__(self, name:str):
		self.name = name  # буква регистра
		self.__value = '0'  # значение регистра как строка

# -------------------------- Свойства класса ------------------------- #

	@property
	def value(self):
		return self.__value

	@value.setter
	def value(self, value):
		if self.name == 'Z':
			self.__value = value
		else:
			raise ValueError

# --------------------------- Методы класса -------------------------- #

	# сброс содержимого регистра
	def clear(self):
		self.__value = '0'

	# затереть один символ с конца
	def BS(self):
		if len(self.__value) > 1:
			self.__value = self.__value[:-1]
		else:
			self.__value = '0'

	# ввести один символ в конец
	# IN: c - цифра или точка в строковом представлении
	# IN: newInput - если True, то содержимое регистра заменяется новым значением в 'c'
	#              - если False, то значение в 'c' добавляется в конец значения регистра
	def input(self, c: str, newInput: bool):
		if (len(self.__value) == 1 and self.__value == "0") or (newInput):
			self.__value = c
		else:
			self.__value += c

	# копирует значение из другого регистра класса Regisry
	def copyFrom(self, R:'Regisry'):
		self.__value = R.value

# ------------------------ Специальные методы ------------------------ #

	# TODO переделать, когда будут дробные числа
	def __str__(self):
		return self.__value